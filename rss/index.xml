<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Mazlum TOSUN BLOG]]></title><description><![CDATA[Articles sur Java, JEE et autres...]]></description><link>https://tosun-si.github.io</link><image><url>/images/my_background.jpg</url><title>Mazlum TOSUN BLOG</title><link>https://tosun-si.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Wed, 26 Apr 2017 08:52:42 GMT</lastBuildDate><atom:link href="https://tosun-si.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Fluent iterable Java 8]]></title><description><![CDATA[<div class="sect1">
<h2 id="_1_introduction">1) Introduction</h2>
<div class="sectionbody">
<div class="paragraph">
<p>L&#8217;API open source Guava de Google propose une classe "FluentIterable", permettant d&#8217;effectuer des traitements sur une liste, via une API fonctionnelle.</p>
</div>
<div class="paragraph">
<p>Le but de cet article est de montrer comment refaire un "fluent iterable", avec les fonctions par défaut proposées par le JDK 8.</p>
</div>
<div class="paragraph">
<p>Seuls les traitements de filtre et de transformation, seront proposés dans cet article.</p>
</div>
<div class="paragraph">
<p>Avec Java 8, il est plus simple d&#8217;effectuer des designs orientés fonctionnels, avec l&#8217;apport des lambdas expression et des accès par référence de méthode.</p>
</div>
<div class="paragraph">
<p>En effet les classes anonymes (ou statiques), permettaient déjà de faire du design fonctionnel, cependant l'écriture était assez verbeuse.</p>
</div>
<div class="paragraph">
<p>Les lambdas apportent beaucoup plus de lisibilité et permettent de faire du "behavior parameterization", avec plus de simplicité et de lisibilité (ce terme signifie qu&#8217;il est possible d&#8217;appliquer des comportements à des traitements, via des blocs de code).</p>
</div>
<div class="paragraph">
<p>L&#8217;API Stream proposée par défaut dans Java 8 permet de refaire simplement, les cas présentés dans cet article. En effet, cette API permet de faire les opérations de type "map, filter, reduce".</p>
</div>
<div class="paragraph">
<p>Nous n&#8217;allons pas réinventer la roue, mais plutôt montrer, via un design basé sur les lambdas, comment effectuer des opérations sur une liste, de façon fluide et chaînée (design pattern builder).</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_2_classe_fluentiterable">2) Classe FluentIterable</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Voici le code la classe FluentIterable :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java" data-lang="java">/**
 * Wrapper that allows to do many operation on a given {@link List}, with fluent style builder
 * pattern.
 *
 * @author Mazlum
 * @param &lt;T&gt; current type of wrapped list
 */
public final class FluentIterable&lt;T&gt; {

  // Fields.

  private List&lt;T&gt; list;

  // Constructors.

  /**
   * Private constructor.
   */
  private FluentIterable(final List&lt;T&gt; list) {
    this.list = list;
  }

  /**
   * Static factory method that allows to instantiate {@link FluentIterable} from a given list.
   *
   * @param fromList from list
   * @return current {@link FluentIterable} with from list
   */
  public static &lt;T&gt; FluentIterable&lt;T&gt; from(final List&lt;T&gt; fromList) {

    // Checks if given list is not null.
    Objects.requireNonNull(fromList);

    // Returns instance of fluent iterable with given list.
    return new FluentIterable&lt;&gt;(fromList);
  }

  // Builder methods.

  /**
   * Allows to filter list with a {@link Predicate}. This {@link Predicate} allows to apply
   * "behavior parameterization" strategy.
   *
   * @param filter current filter
   * @return current {@link FluentIterable}
   */
  public FluentIterable&lt;T&gt; filter(final Predicate&lt;? super T&gt; filter) {

    // Filters current list by given predicate.
    final List&lt;T&gt; filteredList = new ArrayList&lt;&gt;();
    this.list.forEach(t -&gt; {
      if (filter.test(t)) {
        filteredList.add(t);
      }
    });

    // Returns new instance of fluent iterable with filtered list.
    return from(filteredList);
  }

  /**
   * Allows to transform list to other, with a {@link Function} (mapper). This {@link Function}
   * allows to apply "behavior parameterization" strategy.
   *
   * @param mapper current mapper function
   * @return current {@link FluentIterable}
   */
  public &lt;U&gt; FluentIterable&lt;U&gt; transform(final Function&lt;? super T, ? extends U&gt; mapper) {

    // Build transformed list by given function.
    final List&lt;U&gt; transformedList = new ArrayList&lt;&gt;();
    this.list.forEach(t -&gt; transformedList.add(mapper.apply(t)));

    // Returns new instance of fluent iterable with transformed list.
    return from(transformedList);
  }

  // Result build method.

  /**
   * Allows to return result list.
   *
   * @return result list
   */
  public List&lt;T&gt; toList() {
    return this.list;
  }
}</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_a_la_m_thode_filter">a) La méthode filter</h3>
<div class="paragraph">
<p>La méthode "filter" prend en paramètre un "Predicate", qui est une interface fonctionnelle. En effet le JDK 8 propose par défaut un ensemble d&#8217;interfaces fonctionnelles. Une interface fonctionnelle n&#8217;est autre qu&#8217;une interface, avec une seule méthode abstraite.</p>
</div>
<div class="paragraph">
<p>Ces interfaces sont vues comme des fonctions.</p>
</div>
<div class="paragraph">
<p>Ce type d&#8217;interface permet d&#8217;apporter l&#8217;implémentation de la seule méthode abstraite, via une lambda expression. En effet, il suffit que la lambda ait la même signature que la fonction, pour que l&#8217;implémentation soit acceptée à la compilation (type checking).</p>
</div>
<div class="paragraph">
<p>La fonction Predicate prend en paramètre un objet et retourne un boolean, il faut donc que la lambda qui sert d&#8217;implémentation respecte cette signature.</p>
</div>
<div class="paragraph">
<p>Ainsi via cette lambda, on pourra passer un bloc de code à la méthode filter, qui permettra de faire un test se basant sur un objet en entrée, et retournant un boolean en sortie.</p>
</div>
<div class="paragraph">
<p>L&#8217;implémentation de la méthode filter, permet donc de filtrer la liste en entrée, en récupérant seulement les éléments, qui satisfont la condition attendue par le Predicate.</p>
</div>
</div>
<div class="sect2">
<h3 id="_b_la_m_thode_transform">b) La méthode transform</h3>
<div class="paragraph">
<p>La méthode "transform" prend en paramètre une "Function". Comme pour le Predicate, une Function est une interface fonctionnelle, qui prend en paramètre un objet et retourne un autre objet.</p>
</div>
<div class="paragraph">
<p>Cette signature correspond parfaitement à une méthode de transformation classique.</p>
</div>
<div class="paragraph">
<p>Même principe que pour la partie filter,  la lambda servant d&#8217;implémentation doit respecter cette signature.</p>
</div>
<div class="paragraph">
<p>L&#8217;implémentation de la méthode transform construit une liste d&#8217;objets destination, à partir de la liste d&#8217;objets source.</p>
</div>
<div class="paragraph">
<p>Le design pattern builder permet de chaîner les opérations afin d&#8217;arriver au résultat final (fluent style), c&#8217;est-à-dire la liste résultante des opérations souhaitées.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_3_un_main_pour_les_tests">3) Un main pour les tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Voici le code de la classe TestFluentIterable contenant une méthode "main" :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlightjs highlight"><code class="language-java" data-lang="java">/**
 * Allows to test treatments about fluent iterable.
 *
 * @author Mazlum
 */
public class TestFluentIterable {

  /**
   * Allows to test treatments about fluent iterable.
   *
   * @param args arguments
   */
  public static void main(String[] args) {

    final Person person1 = new Person();
    person1.setLastName("Zizou");
    person1.setFirstName("Mazizou");
    person1.setAge(20);

    final Person person2 = new Person();
    person2.setLastName("Zorro");
    person2.setFirstName("Roronoa");
    person2.setAge(21);

    final Person person3 = new Person();
    person3.setLastName("Motta");
    person3.setFirstName("Thiago");
    person3.setAge(22);

    // Build persons list.
    final List&lt;Person&gt; persons = Arrays.asList(person1, person2, person3);

    // Filters and transforms persons to users, with fluent iterable.
    final List&lt;User&gt; usersWithFluentIterable = FluentIterable.from(persons)
        .filter(p -&gt; p.getAge() &gt; 20).transform(TestFluentIterable::toUser).toList();

    // Same operation with stream API.
    final List&lt;User&gt; usersWithStream = persons.stream().filter(p -&gt; p.getAge() &gt; 20)
        .map(TestFluentIterable::toUser).collect(Collectors.toList());

    System.out.println("User transform with fluent iterable result : " + usersWithFluentIterable);
    System.out.println("User transform with stream API result : " + usersWithStream);
  }

  /**
   * Allows to map {@link Person} to {@link User}.
   *
   * @param person current person
   * @return {@link User} by given {@link Person}
   */
  private static User toUser(final Person person) {
    final User user = new User();
    user.setLastName(person.getLastName());
    user.setFirstName(person.getFirstName());
    user.setAge(person.getAge());

    return user;
  }
}</code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_a_appel_la_m_thode_filter">a) Appel à la méthode filter</h3>
<div class="paragraph">
<p>Dans la partie précédente, nous avions indiqué que la méthode filter prenait en paramètre un "Predicate"; et que ce Predicate pouvait accepter une lambda expression prenant en paramètre un objet et retournant un boolean.</p>
</div>
<div class="paragraph">
<p>C&#8217;est le cas avec cette lambda : "p &#8594; p.getAge() &gt; 20". La méthode filter peut être appelée de la manière suivante : "filter(p &#8594; p.getAge() &gt; 20)" (permet de récupérer toutes les personnes qui ont un âge supérieur à 20).</p>
</div>
</div>
<div class="sect2">
<h3 id="_b_appel_la_m_thode_transform">b) Appel à la méthode transform</h3>
<div class="paragraph">
<p>La méthode transform, quant à elle, prend en paramètre une "Function". Cette "Function" accepte une lambda ou une méthode qui prend en paramètre un objet et retourne un autre objet.</p>
</div>
<div class="paragraph">
<p>Pour cet exemple, un accès "par référence de méthode", a été privilégié pour gagner en lisibilité.</p>
</div>
<div class="paragraph">
<p>Le principe de l&#8217;accès à une méthode par référence suit le même principe qu&#8217;une lambda. Il suffit que la méthode implémentée ait la même signature que la méthode abstraite de l&#8217;interface fonctionnelle.</p>
</div>
<div class="paragraph">
<p>Une méthode est donc ajoutée, prenant en paramètre un objet "Person", et retournant un objet "User" (un mapper).</p>
</div>
<div class="paragraph">
<p>Ainsi, il est possible d&#8217;appeler la méthode transform de la manière suivante : "transform(TestFluentIterable::toUser)"</p>
</div>
<div class="paragraph">
<p>En conclusion, l&#8217;appel à la méthode "toList" retourne la liste correspondant au résultat final.</p>
</div>
<div class="paragraph">
<p>Le code de cet article est disponible sous le github suivant : <a href="https://github.com/tosun-si/tosun-si/blob/master/projetTestJava8" class="bare">https://github.com/tosun-si/tosun-si/blob/master/projetTestJava8</a></p>
</div>
</div>
</div>
</div>]]></description><link>https://tosun-si.github.io/2017/02/27/Fluent-iterable-Java-8.html</link><guid isPermaLink="true">https://tosun-si.github.io/2017/02/27/Fluent-iterable-Java-8.html</guid><pubDate>Mon, 27 Feb 2017 00:00:00 GMT</pubDate></item></channel></rss>